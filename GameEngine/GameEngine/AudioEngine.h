#ifndef INCLUDED_DXTK_AUDIO
#define	INCLUDED_DXTK_AUDIO
//******************************************************************************
//
//
//		DirectXTKAudio
//
//
//******************************************************************************

//------< インクルード >----------------------------------------------------------
#include <algorithm>
#include <Audio.h>

namespace AudioSpace
{
    namespace system
    {

        static const float BOX2D_SCALE = 128.0f;   // Box2D用
        static const float FRAME_RATE = 60.0f;    // フレームレート

        static const int TEXTURE_NUM = 256U;     // テクスチャの最大枚数
        static const int DEBUG_INSTANCE_NUM = 8192U;    // デバッグ文字の最大表示数
        static const int PRIMITIVE_BATCH_INSTANCE_NUM = 4096U;    // プリミティブバッチの最大インスタンス数

    }
    const int MUSIC_FILE_MAX    = 32;   // 最大音楽数
    const int XWB_FILE_MAX      = 16;   // 最大xwbファイル数
    const int WAVE_FILE_MAX     = 128;  // 1つのxwbファイルあたりのwaveファイル数
    const int WAVE_SOUND_MAX    = 8;    // 最大8音同時再生OK

    namespace audio
    {
        //======================================================================
        //
        //      DXTKAudioクラス
        //
        //======================================================================
        class DXTKAudio
        {
        public:

            class Music {
            private:
                std::unique_ptr<DirectX::SoundEffect>           music       = nullptr;
                std::unique_ptr<DirectX::SoundEffectInstance>	musicInst   = nullptr;
                float                                           defVolume   = 0.5f;
                float											curVolume   = 0.0f;
                float                                           fadeVolume  = 0.0f;
                float                                           add         = 0.0f;
                float                                           pitch       = 0.0f;
                float                                           pan         = 0.0f;

            public:
                Music() {}

                //--------------------------------------------------------------
                //  更新処理
                //--------------------------------------------------------------
                void update()
                {
                    // ポーズ中や停止中はフェードを行わない
                    if (isInUse() && getState() != DirectX::SoundState::PLAYING)
                        return;

                    // フェードイン
                    if (add > 0)
                    {
                        curVolume += add;
                        if (curVolume > fadeVolume)
                        {
                            curVolume = fadeVolume;
                            add = 0.0f;
                        }
                        setVolume(curVolume);
                    }

                    // フェードアウト
                    if (add < 0)
                    {
                        curVolume += add;
                        if (curVolume < fadeVolume)
                        {
                            curVolume = fadeVolume;
                            add = 0.0f;
                        }
                        setVolume(curVolume);

                        // ボリュームが0以下になったら停止
                        if (curVolume <= 0.0f)
                        {
                            stop();
                        }
                    }
                }

                //--------------------------------------------------------------
                //  音楽の読み込み
                //--------------------------------------------------------------
                void load(DirectX::AudioEngine* engine, const wchar_t* waveFileName, float volume)
                {
                    if (musicInst) musicInst.reset();
                    music.reset(new DirectX::SoundEffect(engine, waveFileName));
                    defVolume = volume;
                    curVolume = volume;
                }

                //--------------------------------------------------------------
                //  破棄
                //--------------------------------------------------------------
                void unload()
                {
                    if (musicInst)  musicInst.reset();
                    if (music)      music.reset(nullptr);
                }

                //--------------------------------------------------------------
                //  再生
                //--------------------------------------------------------------
                void play(bool isLoop)
                {
                    if (!music) return;
                    musicInst = music->CreateInstance();
                    musicInst->Play(isLoop);
                    curVolume = defVolume;
                    musicInst->SetVolume(curVolume);
                    fadeVolume = curVolume;
                    add = 0.0f;
                    pitch = 0.0f;
                    pan = 0.0f;
                }

                //--------------------------------------------------------------
                //  停止
                //--------------------------------------------------------------
                void stop()
                {
                    if (!musicInst) return;
                    musicInst->Stop();
                }

                //--------------------------------------------------------------
                //  ポーズ
                //--------------------------------------------------------------
                void pause()
                {
                    if (!musicInst) return;
                    musicInst->Pause();
                }

                //--------------------------------------------------------------
                //  レジューム（ポーズからの復帰）
                //--------------------------------------------------------------
                void resume()
                {
                    if (!musicInst) return;
                    musicInst->Resume();
                }

                //--------------------------------------------------------------
                //  ボリュームの設定
                //--------------------------------------------------------------
                void setVolume(float volume)
                {
                    if (!musicInst) return;
                    musicInst->SetVolume(volume);
                    curVolume = volume;
                }

                //--------------------------------------------------------------
                //  ボリュームの取得
                //--------------------------------------------------------------
                float getVolume()
                {
                    return curVolume;
                }

                //--------------------------------------------------------------
                //  フェードイン・フェードアウト
                //--------------------------------------------------------------
                void fade(float sec, float volume)
                {
                    fadeVolume = volume;
                    add = (fadeVolume - curVolume) / (system::FRAME_RATE * sec);   // 1フレームあたりのボリュームの変位
                }

                //--------------------------------------------------------------
                //  状態の取得（isInUseがtrueの場合のみ行うこと）
                //--------------------------------------------------------------
                DirectX::SoundState getState()
                {
                    return musicInst->GetState();
                }

                //--------------------------------------------------------------
                //  ループの取得
                //--------------------------------------------------------------
                bool isLooped()
                {
                    return musicInst->IsLooped();
                }

                //--------------------------------------------------------------
                //  パンの設定（左右のバランス）
                //--------------------------------------------------------------
                void setPan(float p)
                {
                    pan = p;
                    musicInst->SetPan(pan);
                }

                //--------------------------------------------------------------
                //  パンの取得（左右のバランス）
                //--------------------------------------------------------------
                float getPan()
                {
                    return pan;
                }

                //--------------------------------------------------------------
                //  パンの調整
                //--------------------------------------------------------------
                float adjustPan(float p)
                {
                    pan += p;
                    pan = (std::max)((std::min)(pan, 1.0f), -1.0f);
                    musicInst->SetPan(pan);
                    return pan;
                }

                //--------------------------------------------------------------
                //  ピッチの設定
                //--------------------------------------------------------------
                void setPitch(float p)
                {
                    pitch = p;
                    musicInst->SetPitch(pitch);
                }

                //--------------------------------------------------------------
                //  ピッチの取得
                //--------------------------------------------------------------
                float getPitch()
                {
                    return pitch;
                }

                //--------------------------------------------------------------
                //  ピッチの調整
                //--------------------------------------------------------------
                float adjustPitch(float p)
                {
                    pitch += p;
                    pitch = (std::max)((std::min)(pitch, 1.0f), -1.0f);
                    musicInst->SetPitch(pitch);
                    return pitch;
                }

                //--------------------------------------------------------------
                //  フォーマットの取得
                //--------------------------------------------------------------
                const WAVEFORMATEX* getFormat()
                {
                    return music->GetFormat();
                }

                //--------------------------------------------------------------
                //  音楽が使用可能かどうか
                //--------------------------------------------------------------
                bool isInUse()
                {
                    if (!music) return false;
                    return music->IsInUse();
                }
            };

            class Sound {
            private:
                std::unique_ptr<DirectX::WaveBank>				waveBank                                            = nullptr;
                std::unique_ptr<DirectX::SoundEffectInstance>	soundInst[AudioSpace::WAVE_FILE_MAX][WAVE_SOUND_MAX]   = {};
                float											soundVolume[AudioSpace::WAVE_FILE_MAX]                 = {};

            public:
                Sound() {}

                //--------------------------------------------------------------
                //  xwbファイルの読み込み
                //--------------------------------------------------------------
                void load(DirectX::AudioEngine* engine, const wchar_t* xwbFileName, float volume)
                {
                    for (int i = 0; i < WAVE_FILE_MAX; i++)
                    {
                        for (int j = 0; j < WAVE_SOUND_MAX; j++)
                        {
                            if (soundInst[i][j])
                            {
                                soundInst[i][j].reset();
                            }
                        }
                    }

                    waveBank.reset(new DirectX::WaveBank(engine, xwbFileName));
                    for (auto &p : soundVolume) p = volume;
                }

                //--------------------------------------------------------------
                //  効果音の再生
                //--------------------------------------------------------------
                void play(int trackNo)
                {
                    if (trackNo < 0 || trackNo >= WAVE_FILE_MAX)
                    {
                        assert(!"効果音のトラック番号エラー");
                        return;
                    }

                    for (int i = 0; i < WAVE_SOUND_MAX; i++)
                    {
                        if (soundInst[trackNo][i])
                        {
                            DirectX::SoundState state = soundInst[trackNo][i]->GetState();
                            if (state != DirectX::SoundState::STOPPED) continue;
                        }
                        
                        soundInst[trackNo][i] = waveBank->CreateInstance(trackNo);
                        if (soundInst[trackNo][i])
                        {
                            soundInst[trackNo][i]->SetVolume(soundVolume[trackNo]);
                            soundInst[trackNo][i]->Play();
                            break;
                        }
                    }
                }

                //--------------------------------------------------------------
                //  効果音のボリュームを設定
                //--------------------------------------------------------------
                void setVolume(int trackNo, float vol)
                {
                    if (trackNo < 0 || trackNo >= WAVE_FILE_MAX)
                    {
                        assert(!"効果音のトラック番号エラー");
                        return;
                    }

                    soundVolume[trackNo] = vol;
                }

                //--------------------------------------------------------------
                //  xwbが有効かどうか
                //--------------------------------------------------------------
                bool isInUse()
                {
                    return static_cast<bool>(waveBank);
                }
            };

            //--------------------------------------------------------------
            //  コンストラクタ
            //--------------------------------------------------------------
            DXTKAudio();

            //--------------------------------------------------------------
            //  デストラクタ
            //--------------------------------------------------------------
            ~DXTKAudio();

        public:

            //--------------------------------------------------------------
            //  音楽のアップデート
            //--------------------------------------------------------------
            void update();

            //--------------------------------------------------------------
            //  オーディオエンジンのリセット
            //--------------------------------------------------------------
            bool reset();

            //--------------------------------------------------------------
            //  音楽読込
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  const wchar_t* waveFileName     音楽ファイルのパス
            //  float volume                    ボリューム (0.0f ~ 1.0f)
            //--------------------------------------------------------------
            void musicLoad(int, const wchar_t*, float volume = ( 0.5f ));

            //--------------------------------------------------------------
            //  音楽解放
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            void musicUnload(int);

            //--------------------------------------------------------------
            //  音楽再生
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  bool isLoop                     ループ再生するかどうか
            //--------------------------------------------------------------
            void musicPlay(int, bool isLoop = ( false ));

            //--------------------------------------------------------------
            //  音楽停止
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            void musicStop(int);

            //--------------------------------------------------------------
            //  音楽一時停止
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            void musicPause(int);

            //--------------------------------------------------------------
            //  音楽再開（一時停止からの）
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            void musicResume(int);

            //--------------------------------------------------------------
            //  音楽ボリューム設定
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float volume                    ボリューム (0.0f ~ 1.0f)
            //--------------------------------------------------------------
            void musicSetVolume(int, float);

            //--------------------------------------------------------------
            //  音楽ボリューム取得
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            float musicGetVolume(int);

            //--------------------------------------------------------------
            //  音楽のフェードアウト・フェードイン
            //--------------------------------------------------------------
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float sec                       フェード時間
            //  float volume                    ボリューム (0.0f ~ 1.0f)
            //--------------------------------------------------------------
            void musicFade(int, float, float);

            //--------------------------------------------------------------
            //  SoundStateの取得
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            DirectX::SoundState musicGetState(int);

            //--------------------------------------------------------------
            //  ループの有無の取得
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            bool musicIsLooped(int);

            //--------------------------------------------------------------
            //  panの設定
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float pan                       pan (-1.0f ~ 1.0f)
            //--------------------------------------------------------------
            void musicSetPan(int, float);

            //--------------------------------------------------------------
            //  panの取得
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            //  戻り値                           panの値
            //--------------------------------------------------------------
            float musicGetPan(int);

            //--------------------------------------------------------------
            //  panの調整
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float add                       panに追加する値
            //--------------------------------------------------------------
            //  戻り値                           調整後のpanの値
            //--------------------------------------------------------------
            float musicAdjustPan(int, float);

            //--------------------------------------------------------------
            //  pitchの設定
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float pitch                     pitch (-1.0f ~ 1.0f)
            //--------------------------------------------------------------
            void musicSetPitch(int, float);

            //--------------------------------------------------------------
            //  pitchの取得
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            //  戻り値                           pitchの値
            //--------------------------------------------------------------
            float musicGetPitch(int);

            //--------------------------------------------------------------
            //  pitchの調整
            //  int trackNo                     トラック番号 (0 ~ 31)
            //  float add                       pitchに追加する値
            //--------------------------------------------------------------
            //  戻り値                           調整後のpitchの値
            //--------------------------------------------------------------
            float musicAdjustPitch(int, float);

            //--------------------------------------------------------------
            //  フォーマットの取得
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            const WAVEFORMATEX* musicGetFormat(int);

            //--------------------------------------------------------------
            //  音楽が使用可能かどうか
            //  int trackNo                     トラック番号 (0 ~ 31)
            //--------------------------------------------------------------
            bool musicIsInUse(int);

            //--------------------------------------------------------------
            //  効果音の読込
            //--------------------------------------------------------------
            //  int   xwbNo                     何番のxwbか
            //  const wchar_t* xwbFileName      xwbファイルのパス
            //  float volume                    ボリューム (0.0f ~ 1.0f)
            //--------------------------------------------------------------
            void soundLoad(int xwbNo, const wchar_t*, float volume = ( 0.5f ));

            //--------------------------------------------------------------
            //  効果音の再生
            //--------------------------------------------------------------
            //  int   xwbNo                     何番のxwbか
            //  int trackNo                     トラック番号 (0 ~ 127)
            //--------------------------------------------------------------
            void soundPlay(int, int);

            //--------------------------------------------------------------
            //  効果音のボリューム設定
            //--------------------------------------------------------------
            //  int   xwbNo                     何番のxwbか
            //  int trackNo                     トラック番号 (0 ~ 127)
            //  float volume                    ボリューム (0.0f ~ 1.0f)
            //--------------------------------------------------------------
            void soundSetVolume(int, int, float);

            //--------------------------------------------------------------
            //  xwbが有効かどうか
            //--------------------------------------------------------------
            //  int   xwbNo                     何番のxwbか
            //--------------------------------------------------------------
            bool xwbIsInUse(int);

            bool isAudioDevicePresent() { return audioEngine->IsAudioDevicePresent(); }
            bool isCriticalError()      { return audioEngine->IsCriticalError(); }

        private:
            //音楽用
            std::unique_ptr<DirectX::AudioEngine>			audioEngine                     = nullptr;
            Music                                           music[AudioSpace::MUSIC_FILE_MAX]  = {};

            //サウンド用
            Sound                                           sound[AudioSpace::XWB_FILE_MAX]    = {};
        };
    }

}

//******************************************************************************

#endif // !INCLUDED_DXTK_AUDIO
